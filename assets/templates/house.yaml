## TEMPLATES / HOUSE

# -- binary sensors --
- binary_sensor:
    # -- ecobee --
    # HVAC any equipment running
    - name: 'HVAC Ecobee State'
      state: >
        {{
          state_attr('climate.amazon', 'fan')                       or
          is_state_attr('climate.amazon', 'hvac_action', 'heating') or
          is_state_attr('climate.amazon', 'hvac_action', 'cooling')
        }}

    # HVAC fan on/off (when heating/cooling NOT running)
    - name: 'HVAC Ecobee Fan State'
      state: >
        {{ is_state_attr('climate.amazon', 'hvac_action', 'fan') }}

    # HVAC heating on/off
    - name: 'HVAC Ecobee Heating State'
      state: >
        {{ is_state_attr('climate.amazon', 'hvac_action', 'heating') }}

    # HVAC cooling on/off
    - name: 'HVAC Ecobee Cooling State'
      state: >
        {{ is_state_attr('climate.amazon', 'hvac_action', 'cooling') }}


# --- sensors ---
- sensor:
    # -- ecobee --
    # current_temperature from ecobee
    - name: 'HVAC Ecobee Indoor Average Temperature'
      device_class: temperature
      unit_of_measurement: 'Â°C'
      state: >
        {% if is_number(state_attr('climate.amazon', 'current_temperature')) %}
          {{ state_attr('climate.amazon', 'current_temperature') }}
        {% endif %}

    # humidity from ecobee
    - name: 'HVAC Ecobee Indoor Average Humidity'
      device_class: humidity
      unit_of_measurement: '%'
      state: >
        {% if is_number(state_attr('climate.amazon', 'current_humidity')) %}
          {{ state_attr('climate.amazon', 'current_humidity') | float(2) }}
        {% endif %}

    # current mean humidity from min_max calculation
    - name: 'Indoor Mean Humidity'
      device_class: humidity
      unit_of_measurement: '%'
      # return last value if we get 'unknown' state attribute from device. this
      # happens for zigbee devices after home assistant restart.
      state: >
        {% if is_number(states('sensor.indoor_mean_humidity_calculation')) %}
          {{ states('sensor.indoor_mean_humidity_calculation') | int }}
        {% else %}
          {# use previous value if sensor returns unknown #}
          {{ states('sensor.indoor_mean_humidity') }}
        {% endif %}